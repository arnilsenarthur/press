local args = {...}

-- Core Settings
PROTOCOL = "press"

-- Grid Settings
GRID_SIZE = 8
GRID_WIDTH = 2
GRID_HEIGHT = 2

-- Timeout Settings
HANDSHAKE_TIMEOUT = 2
PREPARE_TIMEOUT = 25

local modem = peripheral.find("modem", rednet.open)
local turtles = {}
local turtle_count = 0

function reload_turtles()
    local count = 0
    local all = true
    for y = 0, GRID_HEIGHT - 1 do
        for x = 0, GRID_WIDTH - 1 do
            local name = "robot" .. string.char(65 + x) .. (y + 1)
            local id = rednet.lookup(PROTOCOL, name)
            if turtles[id] then
                turtles[id].found = id ~= nil
                turtles[id].ack = turtles[id].ack and id ~= nil
                turtles[id].selected = false
                turtles[id].ready = false

                if turtles[id].found then
                    count = count + 1
                else
                    print("[Error] Bot " .. name .. " not found!")
                    all = false
                end
            else
                if id then
                    turtles[id] = {name = name, ack = false, ready = false, x = x, y = y, found = id ~= nil, selected = false}
                    count = count + 1
                else
                    print("[Error] Bot " .. name .. " not found!")
                    all = false
                end
            end
        end
    end

    print("[Info] Found " .. count .. " turtles.")
    print("[Info] Waiting for handshakes...")
    
    function send()
        for id, bot in pairs(bots) do
            rednet.send(id, "handshake", PROTOCOL)
            sleep(0.01)
        end
    end

    local ready = 0
    
    function receive()
        local x, y = term.getCursorPos()
        term.setCursorPos(x, y)
        print("[Info] Number of handshaken turtles: " .. ready .. "/" .. count)

        local start = os.clock()
        while os.clock() - start < TIMEOUT and ready < count do
            local id, msg, proto = rednet.receive(PROTOCOL, TIMEOUT - (os.clock() - start))
            if id and msg == "ack" then
                turtles[id].ack = true
                ready = ready + 1
                start = os.clock()
                term.setCursorPos(x, y)
                print("[Info] Number of handshaken turtles: " .. ready .. "/" .. count)
            end
        end
    end

    parallel.waitForAll(send, receive)
    
    for id, bot in pairs(turtles) do
        if not bot.ack then
            print("[Error] Bot " .. bot.name .. " did not handshake!") 
            all = false
        end
    end

    return all
end

reload_turtles()
