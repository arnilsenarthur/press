local args = {...}

-- Core Settings
PROTOCOL = "press"

-- Grid Settings
GRID_SIZE = 8
GRID_WIDTH = 16
GRID_HEIGHT = 16

-- Timeout Settings
HANDSHAKE_TIMEOUT = 2
PREPARE_TIMEOUT = 25

local modem = peripheral.find("modem", rednet.open)
local turtles = {}
local screen = {widgets = {}}
local speaker = peripheral.find("speaker")
local frozen = { is_frozen = false, progress = 0, message = ""}

-- wrap a monitor to display the turtle states
local monitor = peripheral.find("monitor")
if monitor then
    monitor.setTextColor(colors.white)
    monitor.setBackgroundColor(colors.black)
    monitor.clear()
end

-- Utils
function get_turtle(x, y)
    for id, bot in pairs(turtles) do
        if bot.x == x and bot.y == y then
            return bot
        end
    end
    return nil
end

function get_grid(url)
    local response = http.get(url)
    if not response then
        print("[Error] Invalid URL")
    end
    
    local raw_data = response.readAll()
    response.close()
    
    local grid = {}
    for line in raw_data:gmatch("[^\r\n]+") do
        local row = {}
        for number in line:gmatch("%d+") do
            table.insert(row, tonumber(number))
        end
        if #row ~= GRID_WIDTH * GRID_SIZE then
            print("[Error] Line " .. (#grid + 1) .. " has a wrong size!")
            return nil
        end
        table.insert(grid, row)
    end
    
    if #grid ~= GRID_HEIGHT * GRID_SIZE then
        print("[Error] Invalid row count")
        return nil
    end

    return grid
end

-- Display
function refresh_screen()
    function draw_grid(pos_x, pos_y)
        monitor.setBackgroundColor(colors.black)
        monitor.setTextColor(colors.lightGray) 
        monitor.setCursorPos(pos_x, pos_y)

        monitor.write("X ")
        table.insert(screen.widgets, {x = pos_x, y = pos_y, width = 1, height = 1, id = "all"})

        for x = 0, GRID_WIDTH - 1 do
            monitor.write(string.char(65 + x) .. " ")
            table.insert(screen.widgets, {x = pos_x + 2 + x * 2, y = pos_y, width = 1, height = 1, id = "column_" .. x})
        end

        for y = 0, GRID_HEIGHT - 1 do
            monitor.setTextColor(colors.lightGray)
            
            if y > 8 then
                monitor.setCursorPos(pos_x - 1, pos_y + y * 2 + 2)
            else
                monitor.setCursorPos(pos_x, pos_y + y * 2 + 2)
            end

            monitor.write(tostring(y + 1) .. " ")
            table.insert(screen.widgets, {x = pos_x, y = pos_y + y * 2 + 2, width = 1, height = 1, id = "row_" .. y})

            -- draw the grid
            for x = 0, GRID_WIDTH - 1 do
                monitor.setCursorPos(pos_x + 2 + x * 2, pos_y + y * 2 + 2)
                turtle = get_turtle(x, y)
                if turtle then
                    if turtle.selected then
                        monitor.setBackgroundColor(colors.gray)
                    else
                        monitor.setBackgroundColor(colors.black)
                    end

                    if turtle.ack then
                        if turtle.busy then
                            monitor.setTextColor(colors.orange)
                        else
                            monitor.setTextColor(colors.green)
                        end
                    else
                        monitor.setTextColor(colors.red)
                    end
                    monitor.write("O")
                else
                    monitor.setBackgroundColor(colors.black)
                    monitor.setTextColor(colors.white)
                    monitor.write("?")
                end          
                
                table.insert(screen.widgets, {x = pos_x + 2 + x * 2, y = pos_y + y * 2 + 2, width = 1, height = 1, id = "grid_" .. x .. "_" .. y})
            end

            monitor.setBackgroundColor(colors.black)
        end
    end

    function draw_header(pos_x, pos_y)
        if frozen.is_frozen then
            monitor.setTextColor(colors.red)
            monitor.setBackgroundColor(colors.black)
            monitor.setCursorPos(pos_x, pos_y)
            monitor.write(frozen.message .. " " .. string.format("%.2f%%", frozen.progress * 100))

            local progress_width = 33
            local progress = math.floor(frozen.progress * progress_width)
            
            monitor.setCursorPos(pos_x, pos_y + 2)
            monitor.setTextColor(colors.red)
            monitor.write(string.rep("-", progress_width))
            
            monitor.setCursorPos(pos_x, pos_y + 2)
            monitor.setTextColor(colors.green)
            monitor.write(string.rep("-", progress))
        else
            monitor.setBackgroundColor(colors.orange)
            monitor.setTextColor(colors.black)
            monitor.setCursorPos(pos_x, pos_y)
            monitor.write("@")
            table.insert(screen.widgets, {x = pos_x, y = pos_y, width = 1, height = 1, id = "refresh"})
            
            monitor.setBackgroundColor(colors.yellow)
            monitor.setCursorPos(pos_x + 2, pos_y )
            monitor.write("Update")
            table.insert(screen.widgets, {x = pos_x + 2, y = pos_y, width = 6, height = 1, id = "update"})
            
            monitor.setBackgroundColor(colors.lime)
            monitor.setCursorPos(pos_x + 9, pos_y)
            monitor.write("Build")
            table.insert(screen.widgets, {x = pos_x + 8, y = pos_y, width = 5, height = 1, id = "build"})

            monitor.setBackgroundColor(colors.yellow)
            monitor.setCursorPos(pos_x + 15, pos_y)
            monitor.write("Clear")
            table.insert(screen.widgets, {x = pos_x + 15, y = pos_y, width = 5, height = 1, id = "clear"})

            monitor.setCursorPos(pos_x + 21, pos_y)
            monitor.write("Cancel")
            table.insert(screen.widgets, {x = pos_x + 21, y = pos_y, width = 6, height = 1, id = "cancel"})

            monitor.setCursorPos(pos_x + 28, pos_y)
            monitor.write("Empty")
            table.insert(screen.widgets, {x = pos_x + 28, y = pos_y, width = 5, height = 1, id = "empty"})

            monitor.setCursorPos(pos_x - 1, pos_y + 2)
            monitor.setBackgroundColor(colors.black)
            monitor.setTextColor(colors.white)
            monitor.write("Pick: ")

            monitor.setBackgroundColor(colors.yellow)
            monitor.setTextColor(colors.black)

            local pick_pos = pos_x + 4
            
            for i = 1, 16 do
                monitor.setCursorPos(pick_pos, pos_y + 2)
                monitor.write(i)
                
                if i > 9 then
                    table.insert(screen.widgets, {x = pick_pos, y = pos_y + 2, width = 21, height = 1, id = "pick_" .. i})
                else
                    table.insert(screen.widgets, {x = pick_pos, y = pos_y + 2, width = 1, height = 1, id = "pick_" .. i})
                end

                if i == 9 then
                    pick_pos = pick_pos + 2
                elseif i > 9 then
                    pick_pos = pick_pos + 3
                else
                    pick_pos = pick_pos + 1
                end
            end
        end  
    end

    -- Clear widgets
    screen.widgets = {}
    monitor.clear()

    draw_header(4, 2)
    draw_grid(4, 6)
end

-- Methods
function reload_turtles()
    frozen.is_frozen = true
    frozen.progress = 0
    frozen.message = "Reloading turtles..."

    local count = 0
    local found = 0
    local all = true

    for y = 0, GRID_HEIGHT - 1 do
        for x = 0, GRID_WIDTH - 1 do
            local name = "robot" .. string.char(65 + x) .. (y + 1)
            local id = rednet.lookup(PROTOCOL, name)
            if turtles[id] then
                turtles[id].found = id ~= nil
                turtles[id].ack =  false
                turtles[id].busy = false

                if turtles[id].found then
                    found = found + 1
                else
                    all = false
                end
            else
                if id then
                    turtles[id] = {name = name, ack = false, x = x, y = y, found = id ~= nil, busy = false, selected = false}
                    found = found + 1
                else
                    all = false
                end
            end
            
            count = count + 1
            frozen.progress = count / (GRID_WIDTH * GRID_HEIGHT)
            refresh_screen()
        end
    end

    frozen.progress = 0
    frozen.message = "Waiting for handshakes..."
    
    function send()
        for id, bot in pairs(turtles) do
            rednet.send(id, "handshake", PROTOCOL)
            sleep(0.01)
        end
    end

    local ready = 0
    
    function receive()
        local start = os.clock()
        while os.clock() - start < HANDSHAKE_TIMEOUT and ready < found do
            local id, msg, proto = rednet.receive(PROTOCOL, HANDSHAKE_TIMEOUT - (os.clock() - start))
            if id and msg:sub(1, 3) == "ack" then
                turtles[id].ack = true
                turtles[id].selected = true
                turtles[id].busy = msg:sub(5) == "true"
                ready = ready + 1
                start = os.clock()
                frozen.progress = ready / found
                refresh_screen()
            end
        end
    end 

    parallel.waitForAll(send, receive)
    
    for id, bot in pairs(turtles) do
        if not bot.ack then
            all = false
        end
    end

    frozen.is_frozen = false
    speaker.playSound("entity.experience_orb.pickup")

    refresh_screen()
    return all
end

function do_action(command_provider, can_busy_do)
    speaker.playSound("block.anvil.land")
    frozen.is_frozen = true
    frozen.progress = 0
    frozen.message = "Sending commands..."

    local count = 0
    local done = 0

    for id, bot in pairs(turtles) do
        if bot.selected then
            count = count + 1
        end
    end
    
    for id, bot in pairs(turtles) do
        if bot.selected then
            done = done + 1
            frozen.progress = done / count

            if can_busy_do or not bot.busy then
                turtles[id].busy = true

                local cmd = command_provider(id, bot)
                rednet.send(id, cmd, PROTOCOL)

                sleep(0.01)
                refresh_screen()
            end
        end
    end

    frozen.is_frozen = false
    frozen.progress = 0
    frozen.message = "Done!"
    speaker.playSound("entity.experience_orb.pickup")
    refresh_screen()
end

reload_turtles()

-- Handle clicks on the monitor
parallel.waitForAll(
    function()
        while true do
            local event, side, x, y = os.pullEvent("monitor_touch")
            if event == "monitor_touch" then
                for _, widget in ipairs(screen.widgets) do
                    if x >= widget.x and x <= widget.x + widget.width - 1 and y >= widget.y and y <= widget.y + widget.height - 1 then
                        speaker.playSound("ui.button.click")
                        -- Grid
                        if widget.id:sub(1, 5) == "grid_" then
                            local gridX, gridY = widget.id:match("grid_(%d+)_(%d+)")
                            gridX = tonumber(gridX)
                            gridY = tonumber(gridY)
                            local turtle = get_turtle(gridX, gridY)
                            if turtle then
                                turtle.selected = not turtle.selected and turtle.ack
                            end
                            refresh_screen()
                        elseif widget.id:sub(1, 7) == "column_" then
                            local column = tonumber(widget.id:sub(8))
                            local turtle = get_turtle(column, 0)
                            local new_value = not turtle.selected and turtle.ack
                            for y = 0, GRID_HEIGHT - 1 do
                                local turtle = get_turtle(column, y)
                                if turtle then
                                    turtle.selected = new_value
                                end
                            end
                            refresh_screen()
                        elseif widget.id:sub(1, 4) == "row_" then
                            local row = tonumber(widget.id:sub(5))
                            local turtle = get_turtle(0, row)
                            local new_value = not turtle.selected
                            for x = 0, GRID_WIDTH - 1 do
                                local turtle = get_turtle(x, row)
                                if turtle then
                                    turtle.selected = new_value and turtle.ack
                                end
                            end
                            refresh_screen()
                        elseif widget.id == "all" then
                            local turtle = get_turtle(0, 0)
                            local new_value = not turtle.selected and turtle.ack

                            for id, bot in pairs(turtles) do
                                bot.selected = new_value
                            end
                            refresh_screen()
                        elseif widget.id == "refresh" then
                            reload_turtles()
                            refresh_screen()
                        elseif widget.id == "update" then
                            monitor.clear()
                            monitor.setCursorPos(1, 1)
                            monitor.setTextColor(colors.yellow)
                            monitor.setBackgroundColor(colors.black)
                            monitor.write("Insert the URL on the console:")
                            print("Write the URL to download the update file:")
                            local url = read()
                            
                            function get_cmd(id, bot)
                                return "update " .. url
                            end
                            
                            do_action(get_cmd, false)
                        elseif widget.id == "empty" then
                            function get_cmd(id, bot)
                                return "empty"
                            end
                            
                            do_action(get_cmd, true)
                        elseif widget.id == "clear" then
                            function get_cmd(id, bot)
                                return "clear"
                            end
                            
                            do_action(get_cmd, true)
                        elseif widget.id == "cancel" then
                            function get_cmd(id, bot)
                                return "cancel"
                            end
                            
                            do_action(get_cmd, true)
                        elseif widget.id:sub(1, 5) == "pick_" then
                            local slot = tonumber(widget.id:sub(6))
                            print("[Info] Picking up items from slot " .. slot .. "...")
                            function get_cmd(id, bot)
                                return "pick " .. slot
                            end
                            
                            do_action(get_cmd, true)
                        elseif widget.id == "build" then
                            monitor.clear()
                            monitor.setCursorPos(1, 1)
                            monitor.setTextColor(colors.yellow)
                            monitor.setBackgroundColor(colors.black)
                            monitor.write("Insert the URL on the console:")
                            print("Write the URL to download the build file:")
                            local url = read()

                            local grid = get_grid(url)
                            if grid then
                                function get_cmd(id, bot)
                                    local grid_part = ""
                                    for y = 0, GRID_SIZE - 1 do
                                        local row = {}
                                        for x = 0, GRID_SIZE - 1 do
                                            local index_y = bot.y * GRID_SIZE + y
                                            local index_x = bot.x * GRID_SIZE + x
                                            grid_part = grid_part .. grid[index_y + 1][index_x + 1] .. " "
                                        end
                                        grid_part = grid_part .. "\n"
                                    end

                                    return "build " .. grid_part
                                end

                                do_action(get_cmd, false)
                            end
                        end
                    end
                end
            end
        end
    end,
    function()
        while true do
            local id, msg, proto = rednet.receive(PROTOCOL)
            print("[Info] Received message from turtle " .. id .. ": " .. msg)
            if msg:sub(1, 4) == "done" then
                print("[Info] Turtle " .. id .. " finished!")
                local turtle = turtles[id]
                if turtle then
                    turtle.busy = false
                end
                refresh_screen()
            elseif msg:sub(1, 3) == "ack" then
                local id = tonumber(msg:sub(4))
                local turtle = turtles[id]
                if turtle then
                    turtle.ack = true
                    turtle.busy = msg:sub(6) == "true"
                    turtle.selected = true
                end
                refresh_screen()
            end
        end
    end 
)

return
